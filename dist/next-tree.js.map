{"version":3,"sources":["next-tree.js"],"names":[],"mappingsfile":"next-tree.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var nxDeepClone = nx.deepClone || require('@feizheng/next-deep-clone');\n  var nxTraverse = nx.traverse || require('@feizheng/next-traverse');\n  var nxDeepEach = nx.deepEach || require('@feizheng/next-deep-each');\n  var DEFAULT_OPTIONS = { itemsKey: 'children', clone: true };\n\n  var NxTree = nx.declare('nx.Tree', {\n    statics: {\n      serialize: function(inData) {\n        return JSON.parse(JSON.stringify(inData));\n      }\n    },\n    methods: {\n      init: function(inData, inOptions) {\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.data = this.options.clone ? nxDeepClone(inData) : inData;\n        this.attach();\n        this.meta();\n      },\n      meta: function() {\n        var max = 0;\n        var x = 0;\n        nxDeepEach(this.data, function(_, item) {\n          if (typeof item === 'object') {\n            if (!Array.isArray(item)) {\n              if (item.depth >= max) {\n                max = item.depth;\n              }\n            }\n            item.independent && x++;\n          }\n        });\n        this.meta = { depth: max, x: x, y: max && max + 1 };\n      },\n      attach: function() {\n        var options = this.options;\n        nxTraverse(\n          this.data,\n          function(key, item, target) {\n            item.__parent__ = function() {\n              return target;\n            };\n            item.__children__ = function() {\n              return item[options.itemsKey] || [];\n            };\n          },\n          options\n        );\n      },\n      traverse: function(inCallback) {\n        nxTraverse(this.data, inCallback, this.options);\n      },\n      find: function(inCallback) {\n        var result = null;\n        nxTraverse(\n          this.data,\n          function(index, item, parent) {\n            if (inCallback(index, item, parent)) {\n              result = item;\n              return nx.BREAKER;\n            }\n          },\n          this.options\n        );\n        return result;\n      },\n      search: function(inCallback) {\n        var options = this.options;\n        var data = nxDeepClone(this.data);\n        var filter = function(list, callback) {\n          return list.filter(function(item, index) {\n            var children = item[options.itemsKey];\n            if (children && children.length) {\n              children = item[options.itemsKey] = filter(children, callback);\n              if (children.length) {\n                return true;\n              }\n            }\n            return callback(index, item);\n          });\n        };\n        return filter(data, inCallback);\n      },\n      filter: function(inCallback) {\n        var result = [];\n        nxTraverse(\n          this.data,\n          function(index, item, parent) {\n            if (inCallback(index, item, parent)) {\n              result.push(item);\n            }\n          },\n          this.options\n        );\n        return result;\n      },\n      ancestors: function(inCallback) {\n        var results = [];\n        var current = this.find(inCallback);\n        if (current) {\n          var parent = current.__parent__();\n          while (parent) {\n            results.push(parent);\n            parent = parent.__parent__();\n          }\n        }\n        return results;\n      },\n      descendants: function(inCallback) {\n        var current = this.find(inCallback);\n        var results = [];\n        if (current) {\n          nxTraverse(\n            current,\n            function(_, item) {\n              results = results.concat(item.__children__());\n            },\n            this.options\n          );\n        }\n        return results;\n      },\n      parent: function(inCallback) {\n        var current = this.find(inCallback);\n        return current && current.__parent__();\n      },\n      children: function(inCallback) {\n        var current = this.find(inCallback);\n        return current && current.__children__();\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxTree;\n  }\n})();\n"]}